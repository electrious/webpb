/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.electrious.models.Production', null, global);
goog.exportSymbol('proto.electrious.models.Production.Loss', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.electrious.models.Production = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.electrious.models.Production.repeatedFields_, null);
};
goog.inherits(proto.electrious.models.Production, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.electrious.models.Production.displayName = 'proto.electrious.models.Production';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.electrious.models.Production.Loss = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.electrious.models.Production.Loss, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.electrious.models.Production.Loss.displayName = 'proto.electrious.models.Production.Loss';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.electrious.models.Production.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.electrious.models.Production.prototype.toObject = function(opt_includeInstance) {
  return proto.electrious.models.Production.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.electrious.models.Production} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.electrious.models.Production.toObject = function(includeInstance, msg) {
  var obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    productionHourlyList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    productionAnnual: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    capacityFactor: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    kwhPerKw: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    performanceRatio: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    losses: (f = msg.getLosses()) && proto.electrious.models.Production.Loss.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.electrious.models.Production}
 */
proto.electrious.models.Production.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.electrious.models.Production;
  return proto.electrious.models.Production.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.electrious.models.Production} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.electrious.models.Production}
 */
proto.electrious.models.Production.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setProductionHourlyList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProductionAnnual(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCapacityFactor(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKwhPerKw(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPerformanceRatio(value);
      break;
    case 7:
      var value = new proto.electrious.models.Production.Loss;
      reader.readMessage(value,proto.electrious.models.Production.Loss.deserializeBinaryFromReader);
      msg.setLosses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.electrious.models.Production.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.electrious.models.Production.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.electrious.models.Production} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.electrious.models.Production.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProductionHourlyList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getProductionAnnual();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCapacityFactor();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getKwhPerKw();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPerformanceRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getLosses();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.electrious.models.Production.Loss.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.electrious.models.Production.Loss.prototype.toObject = function(opt_includeInstance) {
  return proto.electrious.models.Production.Loss.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.electrious.models.Production.Loss} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.electrious.models.Production.Loss.toObject = function(includeInstance, msg) {
  var obj = {
    poaShading: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    poaSoiling: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    dcModuleModeled: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    dcInverterMpptClipping: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    dcMismatch: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    dcDiodesAndConnections: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    dcWiring: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    dcTracking: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    dcNameplate: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    dcPowerOptimizer: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    dcPerformanceAdjustment: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    acInverterPowerClipping: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    acInverterPowerConsumption: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    acInverterNightTare: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    acInverterEfficiency: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    acWiring: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    acPerformanceAdjustment: +jspb.Message.getFieldWithDefault(msg, 17, 0.0),
    transformer: +jspb.Message.getFieldWithDefault(msg, 18, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.electrious.models.Production.Loss}
 */
proto.electrious.models.Production.Loss.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.electrious.models.Production.Loss;
  return proto.electrious.models.Production.Loss.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.electrious.models.Production.Loss} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.electrious.models.Production.Loss}
 */
proto.electrious.models.Production.Loss.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPoaShading(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPoaSoiling(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcModuleModeled(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcInverterMpptClipping(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcMismatch(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcDiodesAndConnections(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcWiring(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcTracking(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcNameplate(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcPowerOptimizer(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDcPerformanceAdjustment(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAcInverterPowerClipping(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAcInverterPowerConsumption(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAcInverterNightTare(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAcInverterEfficiency(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAcWiring(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAcPerformanceAdjustment(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTransformer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.electrious.models.Production.Loss.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.electrious.models.Production.Loss.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.electrious.models.Production.Loss} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.electrious.models.Production.Loss.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoaShading();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPoaSoiling();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDcModuleModeled();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDcInverterMpptClipping();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getDcMismatch();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getDcDiodesAndConnections();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getDcWiring();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getDcTracking();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getDcNameplate();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getDcPowerOptimizer();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getDcPerformanceAdjustment();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getAcInverterPowerClipping();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getAcInverterPowerConsumption();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getAcInverterNightTare();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getAcInverterEfficiency();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getAcWiring();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getAcPerformanceAdjustment();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getTransformer();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
};


/**
 * optional float poa_shading = 1;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getPoaShading = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setPoaShading = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float poa_soiling = 2;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getPoaSoiling = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setPoaSoiling = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float dc_module_modeled = 3;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcModuleModeled = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcModuleModeled = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float dc_inverter_mppt_clipping = 4;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcInverterMpptClipping = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcInverterMpptClipping = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float dc_mismatch = 5;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcMismatch = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcMismatch = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float dc_diodes_and_connections = 6;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcDiodesAndConnections = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcDiodesAndConnections = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float dc_wiring = 7;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcWiring = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcWiring = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float dc_tracking = 8;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcTracking = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcTracking = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float dc_nameplate = 9;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcNameplate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcNameplate = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float dc_power_optimizer = 10;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcPowerOptimizer = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcPowerOptimizer = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float dc_performance_adjustment = 11;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getDcPerformanceAdjustment = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setDcPerformanceAdjustment = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float ac_inverter_power_clipping = 12;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getAcInverterPowerClipping = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setAcInverterPowerClipping = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float ac_inverter_power_consumption = 13;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getAcInverterPowerConsumption = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setAcInverterPowerConsumption = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float ac_inverter_night_tare = 14;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getAcInverterNightTare = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setAcInverterNightTare = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float ac_inverter_efficiency = 15;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getAcInverterEfficiency = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setAcInverterEfficiency = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float ac_wiring = 16;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getAcWiring = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setAcWiring = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float ac_performance_adjustment = 17;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getAcPerformanceAdjustment = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setAcPerformanceAdjustment = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional float transformer = 18;
 * @return {number}
 */
proto.electrious.models.Production.Loss.prototype.getTransformer = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.Loss.prototype.setTransformer = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.electrious.models.Production.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.electrious.models.Production.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated float production_hourly = 2;
 * @return {!Array<number>}
 */
proto.electrious.models.Production.prototype.getProductionHourlyList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array<number>} value */
proto.electrious.models.Production.prototype.setProductionHourlyList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.electrious.models.Production.prototype.addProductionHourly = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.electrious.models.Production.prototype.clearProductionHourlyList = function() {
  this.setProductionHourlyList([]);
};


/**
 * optional float production_annual = 3;
 * @return {number}
 */
proto.electrious.models.Production.prototype.getProductionAnnual = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.prototype.setProductionAnnual = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float capacity_factor = 4;
 * @return {number}
 */
proto.electrious.models.Production.prototype.getCapacityFactor = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.prototype.setCapacityFactor = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float kwh_per_kw = 5;
 * @return {number}
 */
proto.electrious.models.Production.prototype.getKwhPerKw = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.prototype.setKwhPerKw = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float performance_ratio = 6;
 * @return {number}
 */
proto.electrious.models.Production.prototype.getPerformanceRatio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.electrious.models.Production.prototype.setPerformanceRatio = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional Loss losses = 7;
 * @return {?proto.electrious.models.Production.Loss}
 */
proto.electrious.models.Production.prototype.getLosses = function() {
  return /** @type{?proto.electrious.models.Production.Loss} */ (
    jspb.Message.getWrapperField(this, proto.electrious.models.Production.Loss, 7));
};


/** @param {?proto.electrious.models.Production.Loss|undefined} value */
proto.electrious.models.Production.prototype.setLosses = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.electrious.models.Production.prototype.clearLosses = function() {
  this.setLosses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.electrious.models.Production.prototype.hasLosses = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.electrious.models);
