// Code generated from upstream! DO NOT EDIT.
// Clean.Tech (c) 2020

syntax = "proto3";

package electrious.api.v1;

option csharp_namespace = "Electrious.Api.V1";
option go_package = "apiv1";
option java_multiple_files = true;
option java_outer_classname = "RoofplateApiProto";
option java_package = "com.electrious.api.v1";
option objc_class_prefix = "EAX";
option php_namespace = "Electrious\\Api\\V1";
option swift_prefix = "";

import "electrious/models/roofplate.proto";

// RoofplateAPI service will help with updateing roofplates.
service RoofplateAPI {
  // UpdateAll will update all roofplates with a given points.
  rpc RoofplateUpdateAll(RoofplateUpdateAllRequest) returns (RoofplateUpdateAllResponse);
  // Reset will reset all roofplates into its original version.
  rpc RoofplateReset(RoofplateResetRequest) returns (RoofplateResetResponse);
  // ListRoofplatesByLeadID will give all roofplates for given lead.
  rpc ListRoofplatesByLeadID(ListRoofplatesByLeadIDRequest) returns (ListRoofplatesByLeadIDResponse);
}

// RoofplateUpdateAllRequest params to update all roofplates
// and calc production / bills - everything realted
// to roofplates and panels on it.
message RoofplateUpdateAllRequest {
  uint64 lead_id = 1;
  repeated models.RoofplateDetected roofplates = 2;
}

// RoofplateUpdateAllResponse is empty response.
message RoofplateUpdateAllResponse {}

// RoofplateResetRequest will reset certain house into its original version
message RoofplateResetRequest {
  uint64 lead_id = 1;
}

// RoofplateResetResponse response is just empty response
message RoofplateResetResponse {}

// ListRoofplatesByLeadIDRequest request needed for roofplates to be returned.
message ListRoofplatesByLeadIDRequest {
  uint64 lead_id = 1;
}

// ListRoofplatesByLeadIDResponse as bunch of roofplates for given lead.
message ListRoofplatesByLeadIDResponse {
  repeated models.Roofplate roofplates = 1;
}
